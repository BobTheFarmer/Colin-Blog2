{
  
    
        "post0": {
            "title": "Minecraft Quiz Using Applab!",
            "content": "",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/week4/applab/2022/09/09/AppLab1.html",
            "relUrl": "/week4/applab/2022/09/09/AppLab1.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Adding a custom theme",
            "content": "As a test, I added the midnight theme. The largest problem I noticed is that it removed the top bar with my _pages. Overall, this theme actually did not cause a lot of damage when compared to those which some of my peers chose, but it is still not usable due to the one major problem .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/week3/ipynb/2022/09/08/Blog5.html",
            "relUrl": "/week3/ipynb/2022/09/08/Blog5.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Vocabulary Game",
            "content": "from random import randint #Variables score = 0 playing = True #Define a list of possible words and definitions wordDict = { 0: &quot;Argument&quot;, 1: &quot;List&quot;, 2: &quot;Index&quot;, 3: &quot;Block&quot;, 4: &quot;Break&quot;, 5: &quot;Class&quot;, 6: &quot;Bug&quot;, 7: &quot;Code&quot;, 8: &quot;Python&quot;, 9: &quot;Def&quot;, 10: &quot;Dictionary&quot; } defDict = { 0: &quot;A value that is passed between programs, subroutines or functions&quot;, 1: &quot;Used to hold multiple values under linear indexes&quot;, 2: &quot;Where a value is in a list/array&quot;, 3: &quot;Structure of source code which is grouped together&quot;, 4: &quot;Used to stop a loop&quot;, 5: &quot;Template definition of the methods and variables in a particular kind of object&quot;, 6: &quot;A mistake in a program&quot;, 7: &quot;Program instructions&quot;, 8: &quot;Coding language that this is written in&quot;, 9: &quot;Used to define a method&quot;, 10: &quot;Used to hold multiple values under nonlinear indexes&quot; } while playing: index = randint(0, 10) print(&quot;Which word matches this definition or example: n&quot; + defDict.get(index)) guess = input() if(guess == wordDict.get(index)): score+=1 print(&quot;Correct! Score: &quot; + str(score)) else: print(&quot;Incorrect! The correct answer was &quot; + wordDict.get(index) + &quot;, Final score: &quot; + str(score)) playing = False . Which word matches this definition or example: Template definition of the methods and variables in a particular kind of object Correct! Score: 1 Which word matches this definition or example: Used to hold multiple values under nonlinear indexes Correct! Score: 2 Which word matches this definition or example: Template definition of the methods and variables in a particular kind of object Incorrect! The correct answer was Class, Final score: 2 .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/week3/ipynb/2022/09/05/vocabGame.html",
            "relUrl": "/week3/ipynb/2022/09/05/vocabGame.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Loops, Lists and Dictionaries",
            "content": "def makeCraftingGrid(name, A1, A2, A3, B1, B2, B3, C1, C2, C3): grid = [name, A1, A2, A3, B1, B2, B3, C1, C2, C3] return grid #Define Some Recipes pickaxe = makeCraftingGrid(&quot;pickaxe&quot;, &quot;wood&quot;, &quot;wood&quot;, &quot;wood&quot;, &quot; &quot;, &quot;stick&quot;, &quot; &quot;, &quot; &quot;, &quot;stick&quot;, &quot; &quot;) sword = makeCraftingGrid(&quot;sword&quot;, &quot; &quot;, &quot;wood&quot;, &quot; &quot;, &quot; &quot;, &quot;wood&quot;, &quot; &quot;, &quot; &quot;, &quot;stick&quot;, &quot; &quot;) craftingTable = makeCraftingGrid(&quot;crafting table&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;Wood&quot;, &quot;Wood&quot;, &quot; &quot;, &quot;Wood&quot;, &quot;Wood&quot;) #This method returns a string for I can print the arrays in a nicer fashion more reminiscent of the game def printCraftingGrid(grid): gridString = &quot;Recipe for a &quot; + grid[0] + &quot;: n&quot; + grid[1] + &quot; &quot; + grid[2] + &quot; &quot; + grid[3] + &quot; n&quot; + grid[4] + &quot; &quot; + grid[5] + &quot; &quot; + grid[6] + &quot; n&quot; + grid[7] + &quot; &quot; + grid[8] + &quot; &quot; + grid[9] return gridString #Define a dict of the recipe gridStrings recipeDict = { &quot;pickaxe&quot;: printCraftingGrid(pickaxe), &quot;sword&quot;: printCraftingGrid(sword), &quot;crafting table&quot;: printCraftingGrid(craftingTable) } #Loop until told to stop run = True while(run): print(&quot;What recipe do you want to see? Type stop to stop the program. All lowercase please.&quot;) recipeInput = input() if(recipeInput != &quot;stop&quot;): print(recipeDict.get(recipeInput)) else: print(&quot;Stopping program...&quot;) run = False . What recipe do you want to see? Type stop to stop the program. All lowercase please. Recipe for a sword: wood wood stick What recipe do you want to see? Type stop to stop the program. All lowercase please. Recipe for a pickaxe: wood wood wood stick stick What recipe do you want to see? Type stop to stop the program. All lowercase please. Recipe for a crafting table: Wood Wood Wood Wood What recipe do you want to see? Type stop to stop the program. All lowercase please. Stopping program... . Applying this to store other personal data and loop through it . dataDict = { &quot;First Name&quot;:&quot;Colin&quot;, &quot;Last Name&quot;:&quot;Weis&quot;, &quot;Name of Dog&quot;:&quot;Ollie&quot;, &quot;Favorite Restaurant&quot;:&quot;Rubios&quot;, &quot;School&quot;:&quot;DNHS&quot;, &quot;City of Residence&quot;:&quot;San Diego&quot;, } for key in dataDict: print(key + &quot;: &quot; + dataDict[key]) . First Name: Colin Last Name: Weis Name of Dog: Ollie Favorite Restaurant: Rubios School: DNHS City of Residence: San Diego .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/python/week3/ipynb/2022/08/30/Blog4.html",
            "relUrl": "/python/week3/ipynb/2022/08/30/Blog4.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Apcsp Notes For Alumni Panel",
            "content": "APCSP Notes for Alumni Panel . Colin . Took CSP twice . Says you have to keep a positive attitude . Anthony . Went from CSA to CSP . Andrew . Took intro to CS, then CSA . Transferring to UCSD (hopefully) . Mabel . Going to UCSD . Took 2 trimesters . Alicen . Going to UCLA for congativitve science computing . Dtya . Computer Science major . How did you realize what you wanted to do and how did this class help with that? . Look outside your classmates . Taking the intro class hooks you/ you like it (2x) . Didn’t originally like the class but doing knows it’s important for aerospace . COGSIN major (psychology+CS); CS gave the technical background for it . Always interested in CS from a young age, took it more seriously in middle and high school and APCSP helped with that . What is the biggest challenge you’ve faced? . Getting started; remember there is a solution on the internet(2x) . Clashing egos; CS egos are not the kindest people . Theory behind CS; in college it is not structured the same . Finding motivation; someone will always be better . Temptation to cut corners, not everything is a checkbox for points . Starting in a new area of CS . Are there any project based learning scenarios in college CS classes . You do only 2; in your freshman and senior years . PBL then tests; split between . Not as much in class but you can work in smaller groups . Dealing with other people is hard . Have you applied CS in your major if you are not majoring in CS . You can write scripts to automate some stuff and will serve you well (2x) . Advanced calculations . 3D printing . Advanced calculations and math calculations . Jupyter notebooks can be used for technical papers . Stats majors and psychology need CS . For existing college students, have you had a job with a school or professor . Be different for references . You can be a bus driver . Code Ninjas . Northrop Grumman; technical drawing revisions visualizing flight data and cybersecurity, scripting for staffing spreadsheet (x3) . LG; APIs, internal APIs, html, python . APCSA got them the internship . Church group . Did you ever focus on personal projects alongside school . Yes, important to get a job, have 2-3 . Visual projects are great . Pathfinding algorithms . Graph theory . How do you use CS in mechanical engineering . Isolate and cut out extra text thats attached to models . Manipulation of commands . Did you do any Del Norte Computer science clubs . Robotics . Tips to get into a internship . Companies will higher in september or november the year before . Projects and clubs; there are a lot of people in stem . Referrals are very helpful . What prior experience do code ninjas need . Good with kids . Takeaway . Computer science is important to a lot of majors and can be useful in many ways like automating tasks and advanced math. There are a variety of ways you can realize that you want to major in computer science. Internships are good and to get one you should try and get referrals .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/2022/08/29/APCSP-Notes-for-Alumni-Panel.html",
            "relUrl": "/2022/08/29/APCSP-Notes-for-Alumni-Panel.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Spanish Notes",
            "content": "Spanish Notes for 4 videos we watched in class . Video #1 . Stem-changes are verbs that change the letters in the word when conjugated in the “boot” . The boot is the 1st, 2nd, 3rd, and 6th, boxes . | . | It could be: . E - IE . | E - I . | O - UE . | U - UE . | . | To do a stem change just swap the left for the right . | In a textbook, it would say Jugar(UE) because it’s a UE stem change . | Change the one on the left if there is multiple . | . | Video #2 . Querer(To want): . Quiero . | Queries . | Quiere . | Queremos . | Quieren . | . | The e in the middle changes to an ie in the boot boxes . | Ar . Cerrar . | Comenzar . | Pensar . | . | Er . Entender . | Perder . | . | Ir . Prefeirir . | Mentir . | . | Pepe always thinks about Marisol . Pepe siempre piensa en Marisol . | . | La banda empieza a tocar a las 9 . The band starts playing at 9:00 . | . | . | Video #3 . Ar . Almorzar . | Contar . | Costar . | Encontrar . | Mostrar . | Recordar . | . | Er . Devover . | Oler . | Volver . | . | Ir . Dormir . | Morir . | . | Rosa y Flor siempre vuelven tarde . | The train returns at 7:00 . El tren vuelve a las siete . | . | Janet never returns things . | Janet jamás devuelve las cosas . | . | Video #4 . Common verbs that go from e - i . Conseguir . | Oedir . | Repetir . | Seguir . | Servir . | . | Yo repetir . Repito . | I repeat . | . | Usted servir . Usted sirve . | You (Formal) Serve . | . | A los gatos y a los perros les fascina la luz del láser y por eso la siguen . The laser’s light is fascinating to cats and dogs and that’s why they follow it . | . | . | .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/2022/08/28/Spanish-Notes.html",
            "relUrl": "/2022/08/28/Spanish-Notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "PE Calendar",
            "content": "print(&quot;What day is it? Please don&#39;t use caps&quot;) dayOfTheWeek = input() #Answer accordingly if(dayOfTheWeek == &quot;monday&quot; or dayOfTheWeek == &quot;wednesday&quot;): print(&quot;In PE today, you have kickball&quot;) else: if(dayOfTheWeek == &quot;tuesday&quot;): print(&quot;In PE today, you have a run and classroom time&quot;) else: if(dayOfTheWeek == &quot;thursday&quot;): print(&quot;In PE today, you have a run and kickball&quot;) else: if(dayOfTheWeek == &quot;friday&quot;): print(&quot;In PE today, you have the weight room&quot;) else: if(dayOfTheWeek == &quot;saturday&quot; or dayOfTheWeek == &quot;sunday&quot;): print(&quot;It&#39;s the weekend silly&quot;) else: print(&quot;That&#39;s not a day of the week. If you think it is, make sure there are no caps and check your spelling&quot;) . What day is it? Please don&#39;t use caps In PE today, you have kickball .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/python/week2/ipynb/notes/pe/2022/08/27/PE-Calender.html",
            "relUrl": "/python/week2/ipynb/notes/pe/2022/08/27/PE-Calender.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "A quiz using python",
            "content": "print(&quot;Enjoy this awesome dog themed quiz! Please answer in all lowercase and don&#39;t type out numbers (e.x: Instead of six, 6)&quot;) #Define lists of questions, answers and point values questions = [&quot;Practice Question: What color is a golden retriever?)&quot;, &quot;Do dogs sweat?&quot;, &quot;(True or false) Some dogs have such a good sense of smell they can smell some medical conditions&quot;, &quot;Dogs have the same intelligence as a __ year old human&quot;, &quot;(True or false) Do dogs have super sensitive ears?&quot;, &quot;How many muscles do dogs have in their ears?&quot;] answers = [&quot;gold&quot;, &quot;no&quot;, &quot;true&quot;, &quot;2&quot;, &quot;true&quot;, &quot;18&quot;] pointValues = [0, 1, 1, 2, 3, 5] #Set some variables indexCounter = 0 points = 0 #Loop through all questions for question in questions: print(&quot;For &quot;, pointValues[indexCounter], &quot; point(s): &quot; + question) guess = str(input()) #If guess is correct, tell the user and give a point, otherwise tell the user the correct answer if(guess == answers[indexCounter]): points+=pointValues[indexCounter] print(&quot;Correct! You guessed &quot; + guess + &quot; for &quot; + str(pointValues[indexCounter]) + &quot; point(s), and that is correct! You now have &quot; + str(points) + &quot; point(s)&quot;) else: print(&quot;Incorrect. You guessed &quot; + guess + &quot; for &quot; + str(pointValues[indexCounter]) + &quot; point(s), but the correct answer was &quot; + answers[indexCounter] + &quot;. You still have &quot; + str(points) + &quot; point(s)&quot;) indexCounter+=1 print(&quot;Thanks for playing my quiz! You got &quot; + str(points) + &quot; point(s)&quot;) . Enjoy this awesome dog themed quiz! Please answer in all lowercase and don&#39;t type out numbers (e.x: Instead of six, 6) For 0 point(s): Practice Question: What color is a golden retriever?) Correct! You guessed gold for 0 point(s), and that is correct! You now have 0 point(s) For 1 point(s): Do dogs sweat? Incorrect. You guessed yes for 1 point(s), but the correct answer was no. You still have 0 point(s) For 1 point(s): (True or false) Some dogs have such a good sense of smell they can smell some medical conditions Incorrect. You guessed false for 1 point(s), but the correct answer was true. You still have 0 point(s) For 2 point(s): Dogs have the same intelligence as a __ year old human Correct! You guessed 2 for 2 point(s), and that is correct! You now have 2 point(s) For 3 point(s): (True or false) Do dogs have super sensitive ears? Incorrect. You guessed yes for 3 point(s), but the correct answer was true. You still have 2 point(s) For 5 point(s): How many muscles do dogs have in their ears? Incorrect. You guessed 9 for 5 point(s), but the correct answer was 18. You still have 2 point(s) Thanks for playing my quiz! You got 2 point(s) . This is my dog Ollie: .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/python/week2/ipynb/2022/08/26/Blog3.html",
            "relUrl": "/python/week2/ipynb/2022/08/26/Blog3.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Using Bash!",
            "content": "#Define Anaconda&#39;s location anaconda=$HOME/opt/anaconda3/Anaconda-Navigator.app #Check if it&#39;s installed cd if [ ! -d $anaconda ] then echo &quot;Sadly, you do not have anaconda installed, or it is in the wrong location :(&quot; fi echo &quot;You have anaconda! :)&quot; . You have anaconda! :) . Using bash to help organize your computer with some helpful school folders . school=$HOME/school cd if [ ! -d $school ] then echo &quot;Directory $school does not exist, making directory $school&quot; mkdir -p $school fi echo &quot;Directory $school exists&quot; #Define and make subfolders #Define them all cs=$HOME/school/computer_science math=$HOME/school/math chem=$HOME/school/chemistry ss=$HOME/school/social_studies spanish=$HOME/school/spanish #Make cs if [ ! -d $cs ] then echo &quot;Directory $cs does not exist, making directory $cs&quot; mkdir -p $cs fi echo &quot;Directory $cs exists&quot; #Make math if [ ! -d $math ] then echo &quot;Directory $cs does not exist, making directory $math&quot; mkdir -p $math fi echo &quot;Directory $math exists&quot; #Make chem if [ ! -d $chem ] then echo &quot;Directory $chem does not exist, making directory $chem&quot; mkdir -p $chem fi echo &quot;Directory $chem exists&quot; #Make ss if [ ! -d $ss ] then echo &quot;Directory $ss does not exist, making directory $ss&quot; mkdir -p $ss fi echo &quot;Directory $ss exists&quot; #Make spanish if [ ! -d $spanish ] then echo &quot;Directory $spanish does not exist, making directory $spanish&quot; mkdir -p $spanish fi echo &quot;Directory $spanish exists&quot; . Directory /Users/colin/school does not exist, making directory /Users/colin/school Directory /Users/colin/school exists Directory /Users/colin/school/computer_science does not exist, making directory /Users/colin/school/computer_science Directory /Users/colin/school/computer_science exists Directory /Users/colin/school/computer_science does not exist, making directory /Users/colin/school/math Directory /Users/colin/school/math exists Directory /Users/colin/school/chemistry does not exist, making directory /Users/colin/school/chemistry Directory /Users/colin/school/chemistry exists Directory /Users/colin/school/social_studies does not exist, making directory /Users/colin/school/social_studies Directory /Users/colin/school/social_studies exists Directory /Users/colin/school/spanish does not exist, making directory /Users/colin/school/spanish Directory /Users/colin/school/spanish exists . Heres the folder the above code created on my pc: .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/bash/week2/ipynb/2022/08/25/Blog2.html",
            "relUrl": "/bash/week2/ipynb/2022/08/25/Blog2.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Spanish conjugations",
            "content": "Conjugation page for Spanish class . Instructions for how to Conjugate AR, ER, and IR verbs . .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/markdown/week2/spanish/notes/2022/08/22/Spanish-Conjugations.html",
            "relUrl": "/markdown/week2/spanish/notes/2022/08/22/Spanish-Conjugations.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "This is my first time using markdown!",
            "content": "This is my first time using markdown! . This is a markdown change to verify that my VsCode is synced with my github. (Which it is because you are seeing this) .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/markdown/week1/2022/08/22/Markdown.html",
            "relUrl": "/markdown/week1/2022/08/22/Markdown.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Python using Jupyter Notebooks",
            "content": "print(&quot;Hello World&quot;) . Hello World . Calculator for how many mcflurrys you can afford: . print(&quot;How much money do you have? (Numbers only please)&quot;) wallet = float(input()) priceOfMcflurry = 2.39 amountOfMcflurrys = wallet/priceOfMcflurry print(&quot;You have $&quot; + str(wallet) + &quot; and each mcflurry costs $&quot; + str(priceOfMcflurry) + &quot;, so you can afford &quot; + str(amountOfMcflurrys) + &quot; mcflurrys!&quot;) . How much money do you have? (Numbers only please) You have $7.17 and each mcflurry costs $2.39, so you can afford 3.0 mcflurrys! .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/python/week1/ipynb/2022/08/22/Blog1.html",
            "relUrl": "/python/week1/ipynb/2022/08/22/Blog1.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "About",
            "content": "A tutorial of fastpages for Jupyter notebooks. . toc:true - badges: true | comments: true | categories: [jupyter] | image: images/chart-preview.png | . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . ModuleNotFoundError Traceback (most recent call last) /Users/colin/Colin-Blog2-4/_notebooks/2020-02-20-test.ipynb Cell 8 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/colin/Colin-Blog2-4/_notebooks/2020-02-20-test.ipynb#X10sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; #collapse-hide -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/colin/Colin-Blog2-4/_notebooks/2020-02-20-test.ipynb#X10sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; import pandas as pd &lt;a href=&#39;vscode-notebook-cell:/Users/colin/Colin-Blog2-4/_notebooks/2020-02-20-test.ipynb#X10sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; import altair as alt ModuleNotFoundError: No module named &#39;pandas&#39; . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . NameError Traceback (most recent call last) /Users/colin/Colin-Blog2-4/_notebooks/2020-02-20-test.ipynb Cell 23 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/colin/Colin-Blog2-4/_notebooks/2020-02-20-test.ipynb#X31sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # display table with pandas -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/colin/Colin-Blog2-4/_notebooks/2020-02-20-test.ipynb#X31sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &lt;a href=&#39;vscode-notebook-cell:/Users/colin/Colin-Blog2-4/_notebooks/2020-02-20-test.ipynb#X31sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() NameError: name &#39;df&#39; is not defined . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/2020/02/20/test.html",
            "relUrl": "/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://bobthefarmer.github.io/Colin-Blog2/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "This is a blog for APCSP made by Colin Weis (BobTheFarmer) .",
          "url": "https://bobthefarmer.github.io/Colin-Blog2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Vocab",
          "content": "Vocab . A collection of vocabulary from throughout the trimester . Basic Terms . Variable: A value that changes based off of conditions . File Types . .html: Used for designing webpages .md: Also used for basic webpage design and can be used with python .ipynb: Uses a combination of python and .md .",
          "url": "https://bobthefarmer.github.io/Colin-Blog2/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bobthefarmer.github.io/Colin-Blog2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}